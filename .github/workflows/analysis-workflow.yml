name: 'SonarCloud Historical Issue Analysis (Single File)'

on:
  workflow_dispatch:

jobs:
  analyze-issues-sequentially:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git checkouts

      - name: 'Install jq'
        run: sudo apt-get install -y jq

      - name: 'Process each issue in a loop'
        run: |
          # This command reads the issues.json file and creates a loop that iterates
          # over each JSON object in the array. The 'c' flag compacts each object
          # onto a single line, which is perfect for a 'while read' loop.
          jq -c '.[]' issues.json | while read issue; do
            # Extract details for the current issue using jq
            issue_number=$(echo "$issue" | jq -r '.number')
            base_hash=$(echo "$issue" | jq -r '.base_hash')
            new_hash=$(echo "$issue" | jq -r '.new_hash')

            echo "--- Processing Issue #${issue_number} ---"
            echo "Base Hash: ${base_hash}"
            echo "New Hash: ${new_hash}"

            # Use status files to track success/failure, as variables in subshells don't persist.
            echo "failure" > base_status.txt
            echo "failure" > new_status.txt

            # --- START: BASE HASH ANALYSIS (Version 1.0) ---
            echo "Analyzing Base Commit: ${base_hash}"
            git checkout -f "$base_hash"
            base_commit_date=$(git log -1 --format=%as)

            # Build and analyze base hash. If successful, write "success" to the status file.
            (
              mvn -B clean verify && \
              mvn -B verify sonar:sonar \
                -Dsonar.projectKey=maven-issue-${issue_number} \
                -Dsonar.projectName="Maven Issue #${issue_number}" \
                -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }} \
                -Dsonar.projectVersion=1.0 \
                -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
                -Dsonar.projectDate=${base_commit_date} && \
              echo "success" > base_status.txt
            ) || (
              echo "Initial build failed for base. Retrying..."
              (
                mvn -B clean compile -DskipTests && \
                mvn -B verify sonar:sonar \
                  -Dsonar.projectKey=maven-issue-${issue_number} \
                  -Dsonar.projectName="Maven Issue #${issue_number}" \
                  -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }} \
                  -Dsonar.projectVersion=1.0 \
                  -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
                  -Dsonar.projectDate=${base_commit_date} && \
                echo "success" > base_status.txt
              )
            )

            # --- START: NEW HASH ANALYSIS (Version 2.0) ---
            echo "Analyzing New Commit: ${new_hash}"
            git checkout -f "$new_hash"
            new_commit_date=$(git log -1 --format=%as)

            # Build and analyze new hash. If successful, write "success" to the status file.
            (
              mvn -B clean verify && \
              mvn -B verify sonar:sonar \
                -Dsonar.projectKey=maven-issue-${issue_number} \
                -Dsonar.projectName="Maven Issue #${issue_number}" \
                -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }} \
                -Dsonar.projectVersion=2.0 \
                -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
                -Dsonar.projectDate=${new_commit_date} \
                -Dsonar.newCode.referenceBranch=1.0 && \
              echo "success" > new_status.txt
            ) || (
              echo "Initial build failed for new. Retrying..."
              (
                mvn -B clean compile -DskipTests && \
                mvn -B verify sonar:sonar \
                  -Dsonar.projectKey=maven-issue-${issue_number} \
                  -Dsonar.projectName="Maven Issue #${issue_number}" \
                  -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }} \
                  -Dsonar.projectVersion=2.0 \
                  -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
                  -Dsonar.projectDate=${new_commit_date} \
                  -Dsonar.newCode.referenceBranch=1.0 && \
                echo "success" > new_status.txt
              )
            )

            # --- START: API EXTRACTION AND REPORTING (Conditional) ---
            base_analysis_status=$(cat base_status.txt)
            new_analysis_status=$(cat new_status.txt)

            if [ "$base_analysis_status" = "success" ] && [ "$new_analysis_status" = "success" ]; then
              echo "Both analyses succeeded. Fetching API reports for Issue #${issue_number}"
              sleep 60

              curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
                "https://sonarcloud.io/api/issues/search?componentKeys=maven-issue-${issue_number}&sinceLeakPeriod=true&p=1&ps=500" \
                -o "new_issues_report_${issue_number}.json"

              curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
                "https://sonarcloud.io/api/issues/search?componentKeys=maven-issue-${issue_number}&statuses=RESOLVED,CLOSED&resolutions=FIXED&resolvedAfter=${base_commit_date}T00:00:00Z&p=1&ps=500" \
                -o "fixed_issues_report_${issue_number}.json"

              # Upload artifacts for THIS issue before the next loop iteration
              gh artifact upload "new_issues_report_${issue_number}.json" "fixed_issues_report_${issue_number}.json" --name "sonarqube-report-issue-${issue_number}"
            else
              echo "::warning::Skipping API extraction for Issue #${issue_number} due to analysis failure."
              echo "Base analysis status: ${base_analysis_status}"
              echo "New analysis status: ${new_analysis_status}"
            fi
            
            # Clean up status files for the next iteration
            rm -f base_status.txt new_status.txt

            echo "--- Finished processing Issue #${issue_number} ---"
            # Return to the original state to ensure clean checkout for the next iteration
            git checkout main # Or your default branch
          done
        env:
          # The GITHUB_TOKEN is required for the 'gh' CLI to upload artifacts
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
